// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  JOB_SEEKER
  MENTOR
  RECRUITER
  EMPLOYER
  STAFF_MEMBER
  ADMIN
}

enum JobStatus {
  OPEN
  HIRED
  CLOSED
  CANCELLED
  ONHOLD
  IN_PROGRESS
  COMPLETED
}

enum SessionStatus {
  ACCEPTED
  DECLINED
  CANCELLED
  WAITING
  DECLINE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
  PAID
  DECLINE
}

enum HiringStatusRec {
  ACCEPTED
  APPROVED
  DECLINED
  CANCELLED
  PENDING
  DECLINE
}

enum HiringStatusAdmin {
  ACCEPTED
  APPROVED
  DECLINED
  DECLINE
  CANCELLED
  PENDING
}

enum TimesheetStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BlogStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum Days {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

enum JobAppliedStatus {
  IN_PROGRESS
  RESUMED_REVIEWED
  SHORTLISTED
  INTERVIEW_SCHEDULED
  REJECTED
}

model User {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  secondaryEmail String?
  password       String
  role           UserRole
  resume         String?
  email_confirm  Boolean  @default(false)
  profileId      Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  isActive       Boolean  @default(true)
  isAdmin        Boolean  @default(false)
  firstLogin     Boolean  @default(true)
  activeCardId   Int?

  // Relations
  Profile                 Profile[]
  Education               Education[]
  Certificate             Certificate[]
  Location                Location[]
  EmpolymentHistory       EmpolymentHistory[]
  Documents               Documents[]
  SaveJobpost             SaveJobpost[]
  MentorSessionManagement MentorSessionManagement[] @relation("UserSessions")
  Notification            Notification[]            @relation("UserNotification")
  JobApplied              JobApplied[]
  MentorProfile           MentorProfile[]

  // Employer bookings (One user can have many employer bookings)
  employerBookings Booking[] @relation("EmployerBookings")

  // Recruiter bookings (One user can have many recruiter bookings)
  recruiterBookings Booking[] @relation("RecruiterBookings")

  // Recruiter hiring relations
  employerRecruiterHirings  RecruiterHiring[] @relation("EmployerRecruiterHirings")
  recruiterRecruiterHirings RecruiterHiring[] @relation("RecruiterRecruiterHirings")

  mentorSessions         MentorSessionManagement[] @relation("MentorSessions")
  mentorNotification     Notification[]            @relation("MentorNotification")
  services               Service[]
  JobPost                JobPost[]
  EmployerPointOfContact EmployerPointOfContact[]
  Activity               Activity[]
  Card                   Card[]

  @@index([email])
  @@index([role])
}

model Profile {
  id               Int               @id @default(autoincrement())
  userId           Int               @unique
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  fullname         String?
  phnumber         Int?
  mentorvideolink  String?
  avatarId         String?
  location         String?
  companyName      String?
  companySize      String?
  companyLink      String?
  about            String?           @db.Text
  language         String?
  tagline          String?
  industry         String?
  services         String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  JobSeekerProfile JobSeekerProfile?
  RecruiterProfile RecruiterProfile?
  EmployerProfile  EmployerProfile?
  AdminProfile     AdminProfile?
}

model JobSeekerProfile {
  id             Int              @id @default(autoincrement())
  resume         String?
  profileId      Int              @unique
  profile        Profile          @relation(fields: [profileId], references: [id], onDelete: Cascade)
  JobApplication JobApplication[]
}

model Education {
  id             Int    @id @default(autoincrement())
  degreName      String
  universityName String
  description    String
  startFrom      String
  endIn          String
  userId         Int
  user           User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId]) // Index userId to allow multiple records
}

model Certificate {
  id          Int    @id @default(autoincrement())
  certName    String
  orgName     String
  description String
  completedOn String
  startedOn   String
  userId      Int
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmpolymentHistory {
  id          Int    @id @default(autoincrement())
  company     String
  jobTitle    String
  description String
  startedOn   String
  endOn       String
  userId      Int
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Location {
  id         Int     @id @default(autoincrement())
  city       String?
  state      String?
  country    String?
  address    String?
  postalCode Int?
  userId     Int     @unique
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Documents {
  id             Int     @id @default(autoincrement())
  resumeLink     String
  portfolioLink  String
  websiteLink    String?
  additionalLink String?
  userId         Int     @unique
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model JobPost {
  id              Int           @id @default(autoincrement())
  randomId        String?
  jobTitle        String
  companyName     String
  location        String
  description     String        @db.LongText
  applicationLink String
  companyIcon     String?
  time            String?
  jobType         String
  salary          String?
  minPrice        String?
  maxPrice        String?
  userId          Int
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  status          JobStatus     @default(OPEN)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  saveJobpost     SaveJobpost[]
  JobApplied      JobApplied[]
}

model SaveJobpost {
  id      Int     @id @default(autoincrement())
  jobId   Int
  jobpost JobPost @relation(fields: [jobId], references: [id])
  userId  Int
  User    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model JobApplied {
  id          Int              @id @default(autoincrement())
  jobId       Int
  jobpost     JobPost          @relation(fields: [jobId], references: [id])
  userId      Int
  User        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  appliedDate DateTime         @default(now())
  status      JobAppliedStatus @default(IN_PROGRESS)
}

model Notification {
  id        Int      @id @default(autoincrement())
  title     String
  message   String
  userId    Int
  user      User     @relation("UserNotification", fields: [userId], references: [id], map: "FK_User_Notification", onDelete: Cascade)
  mentorId  Int?
  mentor    User?    @relation("MentorNotification", fields: [mentorId], references: [id], map: "FK_Mentor_Notification")
  createdAt DateTime @default(now())
  Review    Review[]
}

model Review {
  id             Int          @id @default(autoincrement())
  content        String // Actual review content
  notificationId Int // Relation to Notification
  rating         Int
  notification   Notification @relation(fields: [notificationId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model MentorProfile {
  id               Int     @id @default(autoincrement())
  name             String?
  tagline          String
  about            String
  languages        String
  resume           String?
  industry         String?
  discipline       String?
  location         String?
  yearOfExperience Int?
  rating           Int
  totalReview      Int?
  userId           Int
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  linkedinProfile  String?

  Blog    Blog[]
  Earning Earning[]
}

model Service {
  id                      Int                       @id @default(autoincrement())
  name                    String
  description             String                    @db.Text
  pricing                 Int
  mentorId                Int?
  user                    User?                     @relation(fields: [mentorId], references: [id], onDelete: Cascade)
  MentorSessionManagement MentorSessionManagement[]
  Booking                 Booking[]
  HiredService            HiredService[]
}

model MentorSessionManagement {
  id               Int            @id @default(autoincrement())
  selectedService  Int? // Optional field
  Service          Service?       @relation(fields: [selectedService], references: [id])
  selectedDateTime DateTime? // Optional field
  status           SessionStatus? @default(ACCEPTED) // Optional field
  userId           Int
  user             User           @relation("UserSessions", fields: [userId], references: [id], map: "FK_User_Session", onDelete: Cascade)
  mentorProfileId  Int?
  mentor           User?          @relation("MentorSessions", fields: [mentorProfileId], references: [id], map: "FK_Mentor_Session")
  paymentStatus    PaymentStatus? @default(COMPLETED) // Optional field with default value
  createdAt        DateTime?      @default(now()) // Optional field
  updatedAt        DateTime?      @updatedAt // Optional field
}

model RecruiterProfile {
  id              Int     @id @default(autoincrement())
  name            String
  resume          String?
  linkedinProfile String
  profileId       Int     @unique
  profile         Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  Earning Earning[]
}

model AdminProfile {
  id        Int     @id @default(autoincrement())
  profileId Int     @unique
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  Blog Blog[]
}

model EmployerProfile {
  id             Int              @id @default(autoincrement())
  profileId      Int              @unique
  resume         String?
  profile        Profile          @relation(fields: [profileId], references: [id], onDelete: Cascade)
  JobApplication JobApplication[]
}

model EmployerPointOfContact {
  id            Int     @id @default(autoincrement())
  name          String
  jobRole       String?
  phnumber      String?
  email         String?
  userId        Int?
  user          User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  contactNumber String?
}

model JobApplication {
  id               Int              @id @default(autoincrement())
  jobTitle         String
  jobDescription   String
  tags             String
  jsId             Int
  JobSeekerProfile JobSeekerProfile @relation(fields: [jsId], references: [id])
  postedBy         Int
  EmployerProfile  EmployerProfile  @relation(fields: [postedBy], references: [id])
  jobStatus        JobStatus
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  jobPostId        Int?

  @@index([tags])
  @@index([jobTitle])
  @@index([jsId])
  @@index([postedBy])
}

model RecruiterHiring {
  id                      Int               @id @default(autoincrement())
  jobDetail               String
  adminApprovalStatus     HiringStatusAdmin
  recruiterApprovalStatus HiringStatusRec
  jobStatus               JobStatus
  paymentStatus           PaymentStatus?
  employerId              Int
  employer                User              @relation("EmployerRecruiterHirings", fields: [employerId], references: [id], map: "FK_EmployerId")
  recruiterId             Int?
  recruiter               User?             @relation("RecruiterRecruiterHirings", fields: [recruiterId], references: [id], map: "FK_RecId")
  timeSheets              TimeSheet[] // One-to-Many relationship with TimeSheet
  hiredServices           HiredService[] // One-to-Many relationship with HiredService
  createdAt               DateTime?         @default(now())
  updatedAt               DateTime?         @updatedAt

  @@map("RecruiterHiring")
}

model HiredService {
  id               Int             @id @default(autoincrement())
  hiredRecruiterId Int
  serviceId        Int
  startDate        DateTime
  endDate          DateTime
  hiredRecruiter   RecruiterHiring @relation(fields: [hiredRecruiterId], references: [id])
  service          Service         @relation(fields: [serviceId], references: [id])
}

model TimeSheet {
  id                    Int             @id @default(autoincrement())
  weeklyTimesheet       Json?
  totalHourWorked       Int
  totalAmountDue        Int
  totalPayableAmount    Int
  approvalStatusEmp     TimesheetStatus @default(PENDING)
  recruitingId          Int
  recruiterHiring       RecruiterHiring @relation(fields: [recruitingId], references: [id])
  independentContracter Boolean? // Made optional
  sendingtoclient       Boolean? // Made optional
  sendChargestoFuse     Boolean? // Made optional
  managingSupervion     String? // Made optional
  recruiterName         String? // Made optional
  HiredBy               String? // Made optional
  phoneNumber           String? // Made optional
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
}

//npx prisma migrate dev --name add_optional_columns

model Blog {
  id          Int           @id @default(autoincrement())
  title       String
  content     String
  status      BlogStatus    @default(PENDING)
  mentorId    Int
  mentor      MentorProfile @relation(fields: [mentorId], references: [id])
  fuseAdminId Int?
  fuseAdmin   AdminProfile? @relation(fields: [fuseAdminId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Booking {
  id               Int            @id @default(autoincrement())
  selectedService  Int? // Optional field
  Service          Service?       @relation(fields: [selectedService], references: [id])
  selectedDateTime DateTime? // Optional field
  status           SessionStatus? @default(ACCEPTED) // Optional field
  employerId       Int
  employer         User           @relation("EmployerBookings", fields: [employerId], references: [id], onDelete: Cascade)
  recId            Int
  recruiter        User           @relation("RecruiterBookings", fields: [recId], references: [id], onDelete: Cascade)
  paymentStatus    PaymentStatus? @default(COMPLETED) // Optional field with default value
  createdAt        DateTime?      @default(now()) // Optional field
  updatedAt        DateTime?      @updatedAt // Optional field
}

model Earning {
  id          Int               @id @default(autoincrement())
  amount      Float
  date        DateTime
  mentorId    Int?
  mentor      MentorProfile?    @relation(fields: [mentorId], references: [id])
  recruiterId Int?
  recruiter   RecruiterProfile? @relation(fields: [recruiterId], references: [id])
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model Activity {
  id        Int      @id @default(autoincrement())
  title     String
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Card {
  id             Int    @id @default(autoincrement())
  email          String
  cardNumber     String
  cardHolderName String
  expiryDate     String
  cvv            String
  userId         Int // Foreign key reference to User
  user           User   @relation(fields: [userId], references: [id])
}
