// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  JOB_SEEKER
  MENTOR
  RECRUITER
  EMPLOYER
  ADMIN
}

enum JobStatus {
  OPEN
  HIRED
  CLOSED
  CANCELLED
  ONHOLD
}

enum SessionStatus {
  ACCEPTED
  DECLINED
  CANCELLED
  WAITING
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum HiringStatus {
  ACCEPTED
  DECLINED
  CANCELLED
}

enum TimesheetStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BlogStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model User {
  id                Int                 @id @default(autoincrement())
  email             String              @unique
  secondaryEmail    String?
  password          String
  role              UserRole
  resume            String?
  email_confirm     Boolean             @default(false)
  profileId         Int?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  isActive          Boolean             @default(true) // Add for Deactivation Feature
  firstLogin          Boolean             @default(true)
  Profile           Profile[]
  Education         Education[]
  Certificate       Certificate[]
  Location          Location[]
  EmpolymentHistory EmpolymentHistory[]
  Documents         Documents[]
  SaveJobpost       SaveJobpost[]
  Notification      Notification[]
  MentorSessionManagement   MentorSessionManagement[]
  JobApplied              JobApplied[]
  @@index([email])
  @@index([role])
}


model Profile {
  id               Int               @id @default(autoincrement())
  userId           Int               @unique
  user             User              @relation(fields: [userId], references: [id])
  fullname         String
  phnumber         Int
  avatarId         String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  JobSeekerProfile JobSeekerProfile?
  MentorProfile    MentorProfile?
  RecruiterProfile RecruiterProfile?
  EmployerProfile  EmployerProfile?
  AdminProfile     AdminProfile?
}

model JobSeekerProfile {
  id                      Int                       @id @default(autoincrement())
  resume                  String?
  profileId               Int                       @unique
  profile                 Profile                   @relation(fields: [profileId], references: [id])

  JobApplication          JobApplication[]
}


model Education {
  id              Int     @id @default(autoincrement())
  degreName       String
  universityName  String
  description     String
  startFrom       String
  endIn           String
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  @@index([userId]) // Index userId to allow multiple records
}

model Certificate{
id              Int               @id @default(autoincrement())
certName       String
orgName        String
description    String
completedOn    String 
startedOn      String   
userId         Int               
user           User              @relation(fields: [userId], references: [id])
}

model EmpolymentHistory{
id             Int               @id @default(autoincrement())
company        String
jobTitle       String
description    String 
startedOn      String
endOn          String
userId         Int               
user           User              @relation(fields: [userId], references: [id])
}


model Location{
id              Int              @id @default(autoincrement())
city            String
state           String
country         String
postalCode      Int
userId          Int               @unique
user            User              @relation(fields: [userId], references: [id])
}

model Documents{
id              Int              @id @default(autoincrement())
resumeLink        String
portfolioLink     String
websiteLink       String?
additionalLink      String?
userId            Int                 @unique
user              User              @relation(fields: [userId], references: [id])
}

model JobPost {
  id              Int              @id @default(autoincrement())
  jobTitle        String
  companyName     String
  location        String
  description     String
  applicationLink String
  companyIcon     String
  time            String?
  jobType         String
  salary          String?
  status          JobStatus        @default(OPEN)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  saveJobpost   SaveJobpost[]
  JobApplied    JobApplied[]
}

model SaveJobpost{
 id              Int              @id @default(autoincrement())
 jobId           Int
 jobpost   JobPost @relation(fields: [jobId], references: [id])
 userId            Int
 User   User @relation(fields: [userId], references: [id])
}

model JobApplied{
  id              Int              @id @default(autoincrement())
 jobId           Int
 jobpost   JobPost @relation(fields: [jobId], references: [id])
 userId            Int
 User   User @relation(fields: [userId], references: [id])
}

model Notification {
  id              Int       @id @default(autoincrement())
  title           String
  message         String
  createdAt       DateTime  @default(now())
  userId          Int
  user            User      @relation(fields: [userId], references: [id])
Review    Review[]
}

model Review {
  id             Int       @id @default(autoincrement())
  content        String    // Actual review content
  notificationId Int       // Relation to Notification
  notification   Notification @relation(fields: [notificationId], references: [id])
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}


model MentorProfile {
  id                      Int                       @id @default(autoincrement())
  name                    String
  tagline                 String
  about                   String
  languages               String
  resume                  String?
  rating                  Int
  totalReview             Int?
  profileId               Int?                       @unique
  profile                 Profile?                   @relation(fields: [profileId], references: [id])
  linkedinProfile         String?
  MentorSessionManagement MentorSessionManagement[]
  services                Service[]
  Blog                    Blog[]
  Booking                 Booking[]
  Earning                 Earning[]
}

model Service {
  id              Int               @id @default(autoincrement())
  name            String
  description     String
  pricing         Int
  mentorProfileId Int
  mentorProfile   MentorProfile     @relation(fields: [mentorProfileId], references: [id])
  RecruiterHiring RecruiterHiring[]
  MentorSessionManagement    MentorSessionManagement[]
}

model MentorSessionManagement {
  id               Int              @id @default(autoincrement())
  selectedService  Int
  Service          Service          @relation(fields: [selectedService], references: [id])
  selectedDateTime DateTime
  price            Int
  status           SessionStatus
  userId           Int              // This is the JobSeeker id
  user             User             @relation(fields: [userId], references: [id])

  // Relation to MentorProfile model
  mentorId         Int
  MentorProfile    MentorProfile    @relation(fields: [mentorId], references: [id])

  paymentStatus    PaymentStatus    @default(PENDING)  // Default value set to "PENDING"
  
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model RecruiterProfile {
  id              Int               @id @default(autoincrement())
  name            String
  resume          String?
  linkedinProfile String
  profileId       Int               @unique
  profile         Profile           @relation(fields: [profileId], references: [id])
  RecruiterHiring RecruiterHiring[]
  TimeSheet       TimeSheet[]
  Booking         Booking[]
  Earning         Earning[]
}

model AdminProfile {
  id        Int         @id @default(autoincrement())
  profileId Int         @unique
  profile   Profile     @relation(fields: [profileId], references: [id])
  TimeSheet TimeSheet[]
  Blog      Blog[]
}

model EmployerProfile {
  id              Int               @id @default(autoincrement())
  profileId       Int               @unique
  resume          String?
  profile         Profile           @relation(fields: [profileId], references: [id])
  JobApplication  JobApplication[]
  RecruiterHiring RecruiterHiring[]
  Timesheet       TimeSheet[]
}

model JobApplication {
  id               Int              @id @default(autoincrement())
  jobTitle         String
  jobDescription   String
  tags             String
  jsId             Int
  JobSeekerProfile JobSeekerProfile @relation(fields: [jsId], references: [id])
  postedBy         Int
  EmployerProfile  EmployerProfile  @relation(fields: [postedBy], references: [id])
  jobStatus        JobStatus
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  jobPostId        Int?
 

  @@index([tags])
  @@index([jobTitle])
  @@index([jsId])
  @@index([postedBy])
}







model RecruiterHiring {
  id               Int              @id @default(autoincrement())
  employerId       Int
  serviceId        Int
  service          Service          @relation(fields: [serviceId], references: [id])
  employerProfile  EmployerProfile  @relation(fields: [employerId], references: [id])
  recruiterId      Int
  RecruiterProfile RecruiterProfile @relation(fields: [recruiterId], references: [id])
  status           HiringStatus
}

model TimeSheet {   // needs to be fixed for only Fuse admin, employer, Recruiter
  id          Int              @id @default(autoincrement())
  employerId       Int
  job         EmployerProfile   @relation(fields: [employerId], references: [id])
  recruiterId Int
  recruiter   RecruiterProfile @relation(fields: [recruiterId], references: [id])
  fuseAdminId Int?
  fuseAdmin   AdminProfile?    @relation(fields: [fuseAdminId], references: [id])
  status      TimesheetStatus  @default(PENDING)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Blog {   //Mentor will write  the Blog
  id          Int           @id @default(autoincrement())
  title       String
  content     String
  status      BlogStatus    @default(PENDING)
  mentorId    Int
  mentor      MentorProfile @relation(fields: [mentorId], references: [id])
  fuseAdminId Int?
  fuseAdmin   AdminProfile? @relation(fields: [fuseAdminId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Booking { // 
  id          Int               @id @default(autoincrement())
  date        DateTime
  duration    Int // Duration in minutes
  mentorId    Int?
  mentor      MentorProfile?    @relation(fields: [mentorId], references: [id])
  recruiterId Int?
  recruiter   RecruiterProfile? @relation(fields: [recruiterId], references: [id])
  status      BookingStatus     @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model Earning {
  id          Int               @id @default(autoincrement())
  amount      Float
  date        DateTime
  mentorId    Int?
  mentor      MentorProfile?    @relation(fields: [mentorId], references: [id])
  recruiterId Int?
  recruiter   RecruiterProfile? @relation(fields: [recruiterId], references: [id])
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}