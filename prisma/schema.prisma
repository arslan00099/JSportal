// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  JOB_SEEKER
  MENTOR
  RECRUITER
  EMPLOYER
  STAFF_MEMBER
  ADMIN
}

enum JobStatus {
  OPEN
  HIRED
  CLOSED
  CANCELLED
  ONHOLD
  IN_PROGRESS
  COMPLETED
  DECLINE
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  FREELANCE
  INTERNSHIP
  TEMPORARY
  REMOTE
  VOLUNTEER
}

enum SessionStatus {
  ACCEPTED
  DECLINED
  CANCELLED
  WAITING
  DECLINE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
  PAID
  DECLINE
}

enum HiringStatusRec {
  ACCEPTED
  APPROVED
  DECLINED
  CANCELLED
  PENDING
  DECLINE
}

enum HiringStatusAdmin {
  ACCEPTED
  APPROVED
  DECLINED
  DECLINE
  CANCELLED
  PENDING
}

enum TimesheetStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BlogStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum Days {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

enum JobAppliedStatus {
  IN_PROGRESS
  RESUMED_REVIEWED
  SHORTLISTED
  INTERVIEW_SCHEDULED
  REJECTED
}

enum ProfileStatus {
  VERIFIED
  UNVERIFIED
  UNVARIFIED
  PENDING
}

enum UserStatus {
  APPROVED
  DISAPPROVED
  PENDING
}

enum StaffStatus {
  ENGAGED
  NOT_ENGAGED
}

enum SubscriptionType {
  GOLD
  DIAMOND
  PLATINUM
  STARTER
  LITE
  PRO
}

model User {
  id                      Int                       @id @default(autoincrement())
  email                   String                    @unique
  secondaryEmail          String?
  password                String
  role                    UserRole
  resume                  String?
  email_confirm           Boolean                   @default(false)
  profileId               Int?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  isActive                Boolean                   @default(true)
  isAdmin                 Boolean                   @default(false)
  deActivate              Boolean                   @default(false)
  firstLogin              Boolean                   @default(true)
  activeCardId            Int?
  resetToken             String?
  resetTokenExpiry        DateTime?
  profileStatus           ProfileStatus?            @default(UNVARIFIED)
  userStatus              UserStatus?               @default(PENDING)
  staffStatus             StaffStatus?              @default(NOT_ENGAGED)
  companyId               Int?
  company                 companyDetails?           @relation(fields: [companyId], references: [id])
  // Relations
  Profile                 Profile[]
  Education               Education[]
  Certificate             Certificate[]
  Location                Location[]
  EmpolymentHistory       EmpolymentHistory[]
  Documents               Documents[]
  SaveJobpost             SaveJobpost[]
  MentorSessionManagement MentorSessionManagement[] @relation("UserSessions")
  Notification            Notification[]            @relation("UserNotification")
  JobApplied              JobApplied[]
  MentorProfile           MentorProfile[]

  // Employer bookings (One user can have many employer bookings)
  employerBookings Booking[] @relation("EmployerBookings")

  // Recruiter bookings (One user can have many recruiter bookings)
  recruiterBookings Booking[] @relation("RecruiterBookings")

  // Recruiter hiring relations
  employerRecruiterHirings  RecruiterHiring[] @relation("EmployerRecruiterHirings")
  recruiterRecruiterHirings RecruiterHiring[] @relation("RecruiterRecruiterHirings")

  mentorSessions     MentorSessionManagement[] @relation("MentorSessions")
  mentorNotification Notification[]            @relation("MentorNotification")

  services               Service[]
  JobPost                JobPost[]
  EmployerPointOfContact EmployerPointOfContact[]
  Activity               Activity[]
  Card                   Card[]
  Blog                   Blog[]

  SubscriptionBought SubscriptionBought[]
  AdminNotification  AdminNotification[]

  @@index([email])
  @@index([role])
}

model Profile {
  id               Int               @id @default(autoincrement())
  userId           Int               @unique
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  fullname         String?
  phnumber         String?
  mentorvideolink  String?
  avatarId         String?
  about            String?           @db.Text
  language         String?
  tagline          String?
  industry         String?
  discipline       String?
  yearOfExperience Int?
  location         String?
  services         String?
  resumeLink       String?
  linkedinLink     String?
  rating           Int?
  companyName      String?
  companySize      String?
  companyLink      String?
  calendlyLink     String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  JobSeekerProfile JobSeekerProfile?
  RecruiterProfile RecruiterProfile?
  EmployerProfile  EmployerProfile?
  AdminProfile     AdminProfile?
}

model companyDetails {
  id           Int     @id @default(autoincrement())
  companyImage String?
  companyEmail String?
  companyPhone String?
  companyName  String?
  companySize  String?
  companyLink  String?
  users        User[]
}

model SubscriptionBought {
  id                  Int               @id @default(autoincrement())
  userId              Int
  subscriptionId      Int
  user                User              @relation(fields: [userId], references: [id])
  subscription        Subscription      @relation(fields: [subscriptionId], references: [id])
  name                SubscriptionType? //can be removedin future
  description         String?           @db.Text
  price               Float
  jobSlots            Int?
  totalJobSlots       Int?
  resumeSearches      Int?
  toalResumeSerarches Int?
  broughtAt           DateTime          @default(now())
}

model Subscription {
  id                 Int                  @id @default(autoincrement())
  name               SubscriptionType
  price              Float
  jobSlots           Int?
  resumeSearches     Int?
  description        String?              @db.Text
  createdAt          DateTime             @default(now())
  SubscriptionBought SubscriptionBought[]
}

model JobSeekerProfile {
  id             Int              @id @default(autoincrement())
  resume         String?
  profileId      Int              @unique
  profile        Profile          @relation(fields: [profileId], references: [id], onDelete: Cascade)
  JobApplication JobApplication[]
}

model Education {
  id             Int    @id @default(autoincrement())
  degreName      String
  universityName String
  description    String @db.LongText
  startFrom      String
  endIn          String
  userId         Int
  user           User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId]) // Index userId to allow multiple records
}

model Certificate {
  id          Int    @id @default(autoincrement())
  certName    String
  orgName     String
  description String @db.LongText
  completedOn String
  startedOn   String
  userId      Int
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmpolymentHistory {
  id          Int    @id @default(autoincrement())
  company     String
  jobTitle    String
  description String @db.LongText
  startedOn   String
  endOn       String
  userId      Int
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Location {
  id         Int     @id @default(autoincrement())
  city       String?
  state      String?
  country    String?
  address    String?
  postalCode Int?
  userId     Int     @unique
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Documents {
  id             Int     @id @default(autoincrement())
  resumeLink     String?
  portfolioLink  String?
  websiteLink    String?
  additionalLink String?
  userId         Int     @unique
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model JobPost {
  id              Int           @id @default(autoincrement())
  randomId        String?
  jobTitle        String
  companyName     String
  location        String
  description     String        @db.LongText
  applicationLink String
  companyIcon     String?
  time            String?
  jobType         JobType
  salary          String?
  minPrice        Int
  maxPrice        Int
  userId          Int
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  status          JobStatus     @default(OPEN)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  saveJobpost     SaveJobpost[]
  JobApplied      JobApplied[]
}

model SaveJobpost {
  id      Int     @id @default(autoincrement())
  jobId   Int
  jobpost JobPost @relation(fields: [jobId], references: [id])
  userId  Int
  User    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model JobApplied {
  id          Int              @id @default(autoincrement())
  jobId       Int
  jobpost     JobPost          @relation(fields: [jobId], references: [id])
  userId      Int
  User        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  appliedDate DateTime         @default(now())
  status      JobAppliedStatus @default(IN_PROGRESS)
}

model Notification {
  id                       Int                      @id @default(autoincrement())
  title                    String
  message                  String
  userId                   Int
  user                     User                     @relation("UserNotification", fields: [userId], references: [id], map: "FK_User_Notification", onDelete: Cascade)
  mentorId                 Int?
  mentor                   User?                    @relation("MentorNotification", fields: [mentorId], references: [id], map: "FK_Mentor_Notification")
  mentorSessionManagmentId Int?
  mentorSessionManagement  MentorSessionManagement? @relation(fields: [mentorSessionManagmentId], references: [id])
  createdAt                DateTime                 @default(now())
  Review                   Review[]
}

model Review {
  id                       Int                      @id @default(autoincrement())
  content                  String // Actual review content
  notificationId           Int? // Relation to Notification
  rating                   Int // Review rating (e.g., 1-5)
  notification             Notification?            @relation(fields: [notificationId], references: [id])
  mentorSessionManagmentId Int? // Relation to MentorSessionManagement
  mentorSessionManagement  MentorSessionManagement? @relation(fields: [mentorSessionManagmentId], references: [id])
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime                 @updatedAt
}

model MentorProfile {
  id               Int       @id @default(autoincrement())
  name             String?
  phonenumber      String?
  tagline          String
  about            String
  languages        String
  resume           String?
  industry         String?
  discipline       String?
  location         String?
  yearOfExperience Int?
  rating           Int
  totalReSSSSview  Int?
  userId           Int
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  linkedinProfile  String?
  Earning          Earning[]
}

model Service {
  id                      Int                       @id @default(autoincrement())
  IndustryName            String?
  name                    String
  description             String                    @db.Text
  pricing                 Int
  mentorId                Int?
  user                    User?                     @relation(fields: [mentorId], references: [id], onDelete: Cascade)
  MentorSessionManagement MentorSessionManagement[]
  Booking                 Booking[]
  HiredService            HiredService[]
  RecruiterHiring         RecruiterHiring[]
}

model MentorSessionManagement {
  id                Int            @id @default(autoincrement())
  transactionNumber String?
  selectedService   Int? // Optional field
  Service           Service?       @relation(fields: [selectedService], references: [id])
  selectedDateTime  DateTime? // this is removed by zubair
  status            SessionStatus? @default(ACCEPTED) // Optional field
  userId            Int
  user              User           @relation("UserSessions", fields: [userId], references: [id], map: "FK_User_Session", onDelete: Cascade)
  mentorProfileId   Int
  mentor            User           @relation("MentorSessions", fields: [mentorProfileId], references: [id], map: "FK_Mentor_Session")
  paymentStatus     PaymentStatus? @default(COMPLETED) // Optional field with default value
  paidOn            DateTime?
  reviews           Review[] // Relation to Review
  createdAt         DateTime?      @default(now()) // Optional field
  updatedAt         DateTime?      @updatedAt // Optional field

  Notification Notification[]
}

model RecruiterProfile {
  id              Int     @id @default(autoincrement())
  name            String
  resume          String?
  linkedinProfile String
  profileId       Int     @unique
  profile         Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  Earning Earning[]
}

model AdminProfile {
  id        Int     @id @default(autoincrement())
  profileId Int     @unique
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model EmployerProfile {
  id             Int              @id @default(autoincrement())
  profileId      Int              @unique
  resume         String?
  profile        Profile          @relation(fields: [profileId], references: [id], onDelete: Cascade)
  JobApplication JobApplication[]
}

model EmployerPointOfContact {
  id            Int     @id @default(autoincrement())
  name          String
  jobRole       String?
  phnumber      String?
  email         String?
  userId        Int     @unique
  user          User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  contactNumber String?
}

model JobApplication {
  id               Int              @id @default(autoincrement())
  jobTitle         String
  jobDescription   String           @db.LongText
  tags             String
  jsId             Int
  JobSeekerProfile JobSeekerProfile @relation(fields: [jsId], references: [id])
  postedBy         Int
  EmployerProfile  EmployerProfile  @relation(fields: [postedBy], references: [id])
  jobStatus        JobStatus
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  jobPostId        Int?

  @@index([tags])
  @@index([jobTitle])
  @@index([jsId])
  @@index([postedBy])
}

model RecruiterHiring {
  id                      Int               @id @default(autoincrement())
  transactionNumber       String?
  adminApprovalStatus     HiringStatusAdmin
  recruiterApprovalStatus HiringStatusRec
  jobStatus               JobStatus
  invoice                 String?
  paymentStatus           PaymentStatus?
  paidOn                  DateTime?
  employerId              Int
  employer                User              @relation("EmployerRecruiterHirings", fields: [employerId], references: [id], map: "FK_EmployerId")
  recruiterId             Int?
  recruiter               User?             @relation("RecruiterRecruiterHirings", fields: [recruiterId], references: [id], map: "FK_RecId")
  timeSheets              TimeSheet[] // One-to-Many relationship with TimeSheet
  hiredServices           HiredService[] // One-to-Many relationship with HiredService
  selectedService         Int? // use this one
  Service                 Service?          @relation(fields: [selectedService], references: [id])
  createdAt               DateTime?         @default(now())
  updatedAt               DateTime?         @updatedAt
  recruiterHiringId       Int?
  TimesheetReview         TimesheetReview[]

  @@map("RecruiterHiring")
}

model TimesheetReview {
  id                Int             @id @default(autoincrement())
  content           String // Actual review content
  notificationId    Int? // Optional Relation to Notification
  rating            Int // Review rating (e.g., 1-5)
  recruiterHiringId Int // Relation to RecruiterHiring
  RecruiterHiring   RecruiterHiring @relation(fields: [recruiterHiringId], references: [id])
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model HiredService {
  id               Int             @id @default(autoincrement())
  hiredRecruiterId Int
  serviceId        Int
  serviceName      String?
  serviceAmount    Int             @default(400)
  jobDetail        String          @db.LongText
  startDate        DateTime
  endDate          DateTime
  hiredRecruiter   RecruiterHiring @relation(fields: [hiredRecruiterId], references: [id])
  service          Service         @relation(fields: [serviceId], references: [id])
}

model TimeSheet {
  id                    Int                 @id @default(autoincrement())
  weeklyTimesheet       Json?
  totalHourWorked       Int
  totalAmountDue        Int
  totalPayableAmount    Int
  approvalStatusEmp     TimesheetStatus     @default(PENDING)
  recruitingId          Int
  recruiterHiring       RecruiterHiring     @relation(fields: [recruitingId], references: [id])
  independentContracter Boolean? // Made optional
  sendingtoclient       Boolean? // Made optional
  sendChargestoFuse     Boolean? // Made optional
  managingSupervion     String? // Made optional
  recruiterName         String? // Made optional
  HiredBy               String? // Made optional
  phoneNumber           String? // Made optional
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  AdminNotification     AdminNotification[]
}

//npx prisma migrate dev --name add_optional_columns

model Blog {
  id        Int        @id @default(autoincrement())
  title     String
  content   String     @db.LongText
  status    BlogStatus @default(PENDING)
  postedBy  Int?
  user      User?      @relation(fields: [postedBy], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Booking {
  id               Int            @id @default(autoincrement())
  selectedService  Int? // Optional field
  Service          Service?       @relation(fields: [selectedService], references: [id])
  selectedDateTime DateTime? // Optional field
  status           SessionStatus? @default(ACCEPTED) // Optional field
  employerId       Int
  employer         User           @relation("EmployerBookings", fields: [employerId], references: [id], onDelete: Cascade)
  recId            Int
  recruiter        User           @relation("RecruiterBookings", fields: [recId], references: [id], onDelete: Cascade)
  paymentStatus    PaymentStatus? @default(COMPLETED) // Optional field with default value
  createdAt        DateTime?      @default(now()) // Optional field
  updatedAt        DateTime?      @updatedAt // Optional field
}

model Earning {
  id          Int               @id @default(autoincrement())
  amount      Float
  date        DateTime
  mentorId    Int?
  mentor      MentorProfile?    @relation(fields: [mentorId], references: [id])
  recruiterId Int?
  recruiter   RecruiterProfile? @relation(fields: [recruiterId], references: [id])
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model Activity {
  id        Int      @id @default(autoincrement())
  title     String
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Card {
  id             Int    @id @default(autoincrement())
  email          String
  cardNumber     String
  cardHolderName String
  expiryDate     String
  cvv            String
  userId         Int // Foreign key reference to User
  user           User   @relation(fields: [userId], references: [id])
}

model Industry {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MentorService {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RecService {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Language {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Skill {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AdminSettings {
  id                 Int      @id @default(autoincrement())
  recruiterDes       String?
  commission         Float?
  postTitle          String?
  postDes            String?
  commissionDes      String?
  aboutUs            String?  @db.LongText
  termsAndConditions String?  @db.LongText
  privacyPolicy      String?  @db.LongText
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Page {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  sections Section[]
}

model Section {
  id       Int       @id @default(autoincrement())
  title    String
  pageId   Int
  page     Page      @relation(fields: [pageId], references: [id])
  contents Content[]
}

model Content {
  id          Int     @id @default(autoincrement())
  heading     String
  description String? // Nullable for sections without descriptions
  sectionId   Int
  section     Section @relation(fields: [sectionId], references: [id])
}

model AdminNotification {
  id            Int        @id @default(autoincrement())
  title         String
  message       String
  senderId      Int?
  user          User?      @relation(fields: [senderId], references: [id])
  timesheetId   Int?
  timesheet     TimeSheet? @relation(fields: [timesheetId], references: [id])
  actionButtons Json?
  createdAt     DateTime   @default(now())
}
